from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
import json
import os
from datetime import datetime
import uuid
import logging

from bot.states.order_states import OrderStates
from bot.keyboards.common_kb import get_main_keyboard, get_confirm_keyboard
from bot.utils.pdf_generator import generate_order_pdf

# ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä—É
MANAGER_CHANNEL_ID = -1001910234699

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    """
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await state.set_state(OrderStates.entering_contact_info)
    
    await callback.answer()
    await callback.message.edit_text(
        "üìû <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–ª—è —Å–≤—è–∑–∏:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: +7 (999) 123-45-67",
        reply_markup=get_confirm_keyboard(),
        parse_mode='HTML'
    )

@router.message(OrderStates.entering_contact_info)
async def process_contact_info(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await state.update_data(
        phone=message.text,
        user_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
    await state.set_state(OrderStates.completing_order)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–π–æ–Ω–µ
    district_name = data.get("district_name")
    if district_name is None or district_name == "None":
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –ø–æ –µ–≥–æ ID
        district_id = data.get("district_id")
        if district_id:
            try:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–π–æ–Ω–∞—Ö
                with open(os.path.join("data", "districts.json"), "r", encoding="utf-8") as file:
                    districts_data = json.load(file)
                
                # –ü–æ–∏—Å–∫ —Ä–∞–π–æ–Ω–∞ –ø–æ ID
                for district in districts_data.get("districts", []):
                    if district.get("id") == district_id:
                        district_name = district.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω")
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º —Ä–∞–π–æ–Ω–∞
                        await state.update_data(district_name=district_name)
                        break
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–π–æ–Ω–∞: {e}")
                district_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω"
        else:
            district_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞
    order_id = str(uuid.uuid4())[:8].upper()
    
    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    order_date = datetime.now().strftime("%d.%m.%Y %H:%M")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –∏ –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞
    await state.update_data(
        order_id=order_id,
        order_date=order_date
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    order_data = {
        "order_id": order_id,
        "user_id": data.get("user_id"),
        "username": data.get("username", "-"),
        "full_name": data.get("full_name", "-"),
        "phone": data.get("phone", "-"),
        "district_name": district_name,
        "depth": data.get("depth", 0),
        "ground_type": data.get("ground_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"),
        "price_per_meter": data.get("price_per_meter", 0),
        "drilling_cost": data.get("drilling_cost", 0),
        "equipment_cost": data.get("equipment_cost", 0),
        "total_cost": data.get("total_cost", 0),
        "selected_equipment": data.get("selected_equipment", {}),
        "equipment_details": data.get("equipment_details", []),
        "adapter_info": data.get("adapter_info", {}),
        "caisson_info": data.get("caisson_info", {}),
        "selected_adapter": data.get("selected_adapter", {}),
        "selected_caisson": data.get("selected_caisson", {}),
        "order_date": order_date,
        "status": "new"
    }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ JSON
    save_order(order_data)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    try:
    pdf_path = generate_order_pdf(order_data)
        pdf_exists = True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        pdf_path = None
        pdf_exists = False
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = (
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {order_date}\n"
        f"üèôÔ∏è –†–∞–π–æ–Ω: {district_name}\n"
        f"üìè –ì–ª—É–±–∏–Ω–∞: {order_data.get('depth')} –º\n"
        f"üß± –¢–∏–ø –≥—Ä—É–Ω—Ç–∞: {order_data.get('ground_type')}\n"
        f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order_data.get('total_cost')} ‚ÇΩ\n\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {order_data.get('phone')}\n\n"
        f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(user_message, parse_mode='HTML')
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF-—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–Ω
    if pdf_exists and pdf_path:
        try:
        await message.answer_document(
                document=FSInputFile(pdf_path),
            caption=f"üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}"
        )
        except Exception as e:
             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_message = (
        f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! #{order_id}</b>\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data.get('full_name')} (@{order_data.get('username')})\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_data.get('phone')}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {order_date}\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {district_name}\n"
        f"üìè <b>–ì–ª—É–±–∏–Ω–∞:</b> {order_data.get('depth')} –º\n"
        f"üß± <b>–¢–∏–ø –≥—Ä—É–Ω—Ç–∞:</b> {order_data.get('ground_type')}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è:</b> {order_data.get('drilling_cost')} ‚ÇΩ\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if order_data.get('equipment_details'):
        manager_message += f"\nüîß <b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>\n"
        for detail in order_data.get('equipment_details'):
            manager_message += f"- {detail}\n"
        manager_message += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> {order_data.get('equipment_cost')} ‚ÇΩ\n"
        
    manager_message += f"\nüí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order_data.get('total_cost')} ‚ÇΩ"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
    try:
        await bot.send_message(MANAGER_CHANNEL_ID, manager_message, parse_mode='HTML')
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –º–µ–Ω–µ–¥–∂–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–Ω
        if pdf_exists and pdf_path:
             await bot.send_document(
                 MANAGER_CHANNEL_ID,
                 document=FSInputFile(pdf_path),
                 caption=f"üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id} –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
             )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –∫–∞–Ω–∞–ª {MANAGER_CHANNEL_ID} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

def save_order(order_data):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ JSON-—Ñ–∞–π–ª
    """
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–∫–∞–∑–∞–º–∏
    orders_file = os.path.join("data", "orders.json")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
    if os.path.exists(orders_file):
        with open(orders_file, "r", encoding="utf-8") as file:
            data = json.load(file)
    else:
        data = {"orders": []}
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    data["orders"].append(order_data)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    with open(orders_file, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

async def send_user_orders(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–∫–∞–∑–∞–º–∏
    orders_file = os.path.join("data", "orders.json")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏
    if not os.path.exists(orders_file):
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    with open(orders_file, "r", encoding="utf-8") as file:
        data = json.load(file)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_orders = [order for order in data.get("orders", []) if order.get("user_id") == user_id]
    
    if not user_orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    user_orders.sort(key=lambda x: datetime.strptime(x.get("order_date", "01.01.2000 00:00"), "%d.%m.%Y %H:%M"), reverse=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF
    for order in user_orders:
        order_id = order.get("order_id", "N/A")
        order_date = order.get("order_date", "N/A")
        district = order.get("district_name", "N/A")
        depth = order.get("depth", "N/A")
        total_cost = order.get("total_cost", "N/A")
        status = order.get("status", "new")
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        status_emoji = "üÜï" if status == "new" else "‚úÖ" if status == "completed" else "üîÑ"
        
        message_text = (
            f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {order_date}\n"
            f"üèôÔ∏è –†–∞–π–æ–Ω: {district}\n"
            f"üìè –ì–ª—É–±–∏–Ω–∞: {depth} –º\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} ‚ÇΩ\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üìÑ –°–∫–∞—á–∞—Ç—å PDF",
            callback_data=f"get_pdf_{order_id}"
        ))
        
        await message.answer(message_text, reply_markup=keyboard.as_markup(), parse_mode='HTML')

@router.callback_query(F.data.startswith("get_pdf_"))
async def get_order_pdf(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ PDF-—Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–∞
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = callback.data.replace("get_pdf_", "")
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–∫–∞–∑–∞–º–∏
        orders_file = os.path.join("data", "orders.json")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏
        if not os.path.exists(orders_file):
            await callback.answer("–§–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        with open(orders_file, "r", encoding="utf-8") as file:
            data = json.load(file)
        
        # –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ ID
        order = next((o for o in data.get("orders", []) if o.get("order_id") == order_id), None)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–∫–∞–∑ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if order.get("user_id") != callback.from_user.id:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É", show_alert=True)
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        try:
            pdf_path = generate_order_pdf(order)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF-—Ñ–∞–π–ª–∞
            await callback.message.answer_document(
                document=FSInputFile(pdf_path),
                caption=f"üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}"
            )
            
            await callback.answer()
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF", show_alert=True)
            import logging
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        import logging
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ PDF: {str(e)}")

