from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.states.order_states import OrderStates
from bot.keyboards.depth_kb import get_depths_keyboard
from bot.keyboards.district_kb import get_districts_keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

async def send_depth_selection(message: Message, state: FSMContext, district_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –≥–ª—É–±–∏–Ω—ã
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ
    data = await state.get_data()
    district_name = data.get("district_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω")
    
    await message.edit_text(
        f"üèôÔ∏è <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–π–æ–Ω:</b> {district_name}\n\n"
        f"üìè <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≥–ª—É–±–∏–Ω—É –±—É—Ä–µ–Ω–∏—è:</b>",
        reply_markup=get_depths_keyboard(district_id)
    )

@router.callback_query(F.data.startswith("depth_"))
async def process_depth_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–ª—É–±–∏–Ω—ã
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω—ã
    depth = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
    data = await state.get_data()
    district_id = data.get("district_id", 1)
    district_name = data.get("district_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–π–æ–Ω–∞—Ö
    import json
    import os
    
    with open(os.path.join("data", "districts.json"), "r", encoding="utf-8") as file:
        districts_data = json.load(file)
    
    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞
    selected_district = next((d for d in districts_data.get("districts", []) if d["id"] == district_id), None)
    
    if not selected_district:
        await callback.answer("‚ùå –†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–π–æ–Ω.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≥—Ä—É–Ω—Ç–∞ –∏ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª—É–±–∏–Ω—ã
    ground_types = selected_district.get("ground_types", {})
    ground_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    price_per_meter = selected_district.get("base_price", 0)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≥—Ä—É–Ω—Ç–∞
    for gtype, info in ground_types.items():
        min_depth = info.get("min_depth", 0)
        max_depth = info.get("max_depth", 0)
        if min_depth <= depth <= max_depth:
            if gtype == "sand":
                ground_type = "–ü–µ—Å–æ–∫"
            elif gtype == "limestone":
                ground_type = "–ò–∑–≤–µ—Å—Ç–Ω—è–∫"
            elif gtype == "limestone_shallow":
                ground_type = "–ò–∑–≤–µ—Å—Ç–Ω—è–∫ (–≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π)"
            elif gtype == "limestone_deep":
                ground_type = "–ò–∑–≤–µ—Å—Ç–Ω—è–∫ (–Ω–∏–∂–Ω–∏–π —Å–ª–æ–π)"
            price_per_meter = info.get("price_per_meter", price_per_meter)
            break
    
    # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—É—Ä–µ–Ω–∏—è
    drilling_cost = price_per_meter * depth
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω–µ, —Ç–∏–ø–µ –≥—Ä—É–Ω—Ç–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    await state.update_data(
        depth=depth,
        ground_type=ground_type,
        price_per_meter=price_per_meter,
        drilling_cost=drilling_cost,
        total_cost=drilling_cost  # –ù–∞—á–∞–ª—å–Ω–∞—è –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–≤–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—É—Ä–µ–Ω–∏—è
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    await state.set_state(OrderStates.selecting_equipment)
    
    # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from bot.handlers.equipment import send_equipment_selection
    
    await callback.answer()
    await send_equipment_selection(callback.message, state)

@router.callback_query(F.data == "back_to_districts")
async def back_to_districts(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–ª—É–±–∏–Ω—ã
    """
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–π–æ–Ω–∞
    await state.set_state(OrderStates.selecting_district)
    
    # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from bot.handlers.district import send_district_selection
    
    await callback.answer()
    await send_district_selection(callback.message, state)

