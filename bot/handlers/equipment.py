from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import json
import os
import logging

from bot.states.order_states import OrderStates
from bot.keyboards.equipment_kb import (
    get_equipment_categories_keyboard,
    get_equipment_components_keyboard,
    get_selected_equipment_keyboard,
    get_caissons_keyboard,
    get_confirm_keyboard
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

async def send_equipment_selection(message: Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
        data = await state.get_data()
        district_name = data.get("district_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω")
        depth = data.get("depth", 0)
        drilling_cost = data.get("drilling_cost", 0)
        ground_type = data.get("ground_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        price_per_meter = data.get("price_per_meter", 0)
        
        await message.edit_text(
            f"üèôÔ∏è <b>–†–∞–π–æ–Ω:</b> {district_name}\n"
            f"üìè <b>–ì–ª—É–±–∏–Ω–∞:</b> {depth} –º\n"
            f"üß± <b>–¢–∏–ø –≥—Ä—É–Ω—Ç–∞:</b> {ground_type}\n"
            f"üíµ <b>–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä:</b> {price_per_meter} ‚ÇΩ\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è:</b> {drilling_cost} ‚ÇΩ\n\n"
            f"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>",
            reply_markup=get_equipment_categories_keyboard(),
            parse_mode='HTML'
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {str(e)}")
        try:
            await message.answer(
                f"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>",
                reply_markup=get_equipment_categories_keyboard()
            )
        except Exception as inner_e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {str(inner_e)}")

@router.callback_query(F.data.startswith("ecat_"))
async def process_equipment_category_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = callback.data.split("_")[1]
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try:
            with open(os.path.join("data", "category_codes.json"), "r", encoding="utf-8") as file:
                categories_data = json.load(file)
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
            if category_id in categories_data.get("categories", {}):
                category = categories_data["categories"][category_id]
            else:
                await callback.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.update_data(current_category=category)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
        data = await state.get_data()
        selected_equipment = data.get("selected_equipment", {})
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        selected_components = selected_equipment.get(category, [])
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await state.set_state(OrderStates.selecting_components)
        
        try:
            await callback.answer()
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback: {str(e)}")
            
        try:
            await callback.message.edit_text(
                f"üîß <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:",
                reply_markup=get_equipment_components_keyboard(category, selected_components),
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            try:
                await callback.message.answer(
                    f"üîß <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:",
                    reply_markup=get_equipment_components_keyboard(category, selected_components)
                )
            except Exception as inner_e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {str(inner_e)}")
    except Exception as e:
        logging.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_equipment_category_selection: {str(e)}")
        try:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        except:
            pass

@router.callback_query(F.data.startswith("comp_"))
async def process_component_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        component_id = callback.data.split("_")[1]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
        data = await state.get_data()
        current_category = data.get("current_category", "")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        try:
            with open(os.path.join("data", "component_codes.json"), "r", encoding="utf-8") as file:
                components_data = json.load(file)
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
            if components_data.get("category") == current_category and component_id in components_data.get("components", {}):
                component = components_data["components"][component_id]
            else:
                await callback.answer("–û—à–∏–±–∫–∞: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {str(e)}")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        selected_equipment = data.get("selected_equipment", {})
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if current_category not in selected_equipment:
            selected_equipment[current_category] = []
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        if component in selected_equipment[current_category]:
            selected_equipment[current_category].remove(component)
        else:
            selected_equipment[current_category].append(component)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
        await state.update_data(selected_equipment=selected_equipment)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        selected_components = selected_equipment.get(current_category, [])
        
        try:
            await callback.answer()
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback: {str(e)}")
            
        try:
            await callback.message.edit_text(
                f"üîß <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {current_category}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:",
                reply_markup=get_equipment_components_keyboard(current_category, selected_components),
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            try:
                await callback.message.answer(
                    f"üîß <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {current_category}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:",
                    reply_markup=get_equipment_components_keyboard(current_category, selected_components)
                )
            except Exception as inner_e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {str(inner_e)}")
    except Exception as e:
        logging.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_component_selection: {str(e)}")
        try:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        except:
            pass

@router.callback_query(F.data == "confirm_components")
async def confirm_components(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    await state.set_state(OrderStates.selecting_equipment)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
    data = await state.get_data()
    district_name = data.get("district_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω")
    depth = data.get("depth", 0)
    drilling_cost = data.get("drilling_cost", 0)
    
    await callback.answer()
    await callback.message.edit_text(
        f"üèôÔ∏è <b>–†–∞–π–æ–Ω:</b> {district_name}\n"
        f"üìè <b>–ì–ª—É–±–∏–Ω–∞:</b> {depth} –º\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è:</b> {drilling_cost} ‚ÇΩ\n\n"
        f"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>",
        reply_markup=get_equipment_categories_keyboard(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "back_to_equipment_categories")
async def back_to_equipment_categories(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    await state.set_state(OrderStates.selecting_equipment)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
    data = await state.get_data()
    district_name = data.get("district_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω")
    depth = data.get("depth", 0)
    drilling_cost = data.get("drilling_cost", 0)
    
    await callback.answer()
    await callback.message.edit_text(
        f"üèôÔ∏è <b>–†–∞–π–æ–Ω:</b> {district_name}\n"
        f"üìè <b>–ì–ª—É–±–∏–Ω–∞:</b> {depth} –º\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è:</b> {drilling_cost} ‚ÇΩ\n\n"
        f"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>",
        reply_markup=get_equipment_categories_keyboard(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "finish_equipment")
async def finish_equipment_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
    data = await state.get_data()
    district_name = data.get("district_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω")
    depth = data.get("depth", 0)
    drilling_cost = data.get("drilling_cost", 0)
    ground_type = data.get("ground_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    price_per_meter = data.get("price_per_meter", 0)
    selected_equipment = data.get("selected_equipment", {})
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    equipment_cost = 0
    equipment_details = []
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
    with open(os.path.join("data", "equipment.json"), "r", encoding="utf-8") as file:
        equipment_data = json.load(file).get("equipment_data", {})
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    for category, components in selected_equipment.items():
        if category in equipment_data and components:
            category_data = equipment_data[category]
            for component in components:
                if component in category_data:
                    component_price = category_data[component]
                    equipment_cost += component_price
                    equipment_details.append(f"{component} ({component_price} ‚ÇΩ)")
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    total_cost = drilling_cost + equipment_cost
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    await state.update_data(
        equipment_cost=equipment_cost,
        total_cost=total_cost,
        equipment_details=equipment_details
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
    await state.set_state(OrderStates.confirming_order)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    message_text = (
        f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n\n"
        f"üèôÔ∏è <b>–†–∞–π–æ–Ω:</b> {district_name}\n"
        f"üìè <b>–ì–ª—É–±–∏–Ω–∞:</b> {depth} –º\n"
        f"üß± <b>–¢–∏–ø –≥—Ä—É–Ω—Ç–∞:</b> {ground_type}\n"
        f"üíµ <b>–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä:</b> {price_per_meter} ‚ÇΩ\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è:</b> {drilling_cost} ‚ÇΩ\n\n"
    )
    
    if equipment_details:
        message_text += f"üîß <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>\n"
        for detail in equipment_details:
            message_text += f"- {detail}\n"
        message_text += f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> {equipment_cost} ‚ÇΩ\n"
    
    message_text += f"\nüí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost} ‚ÇΩ\n\n"
    message_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."
    
    await callback.answer()
    await callback.message.edit_text(
        message_text,
        reply_markup=get_selected_equipment_keyboard(selected_equipment),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "back_to_depth")
async def back_to_depth(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–ª—É–±–∏–Ω—ã
    await state.set_state(OrderStates.selecting_depth)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
    data = await state.get_data()
    district_id = data.get("district_id", 1)
    
    # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from bot.handlers.depth import send_depth_selection
    
    await callback.answer()
    await send_depth_selection(callback.message, state, district_id)

@router.callback_query(F.data.startswith("edit_"))
async def edit_equipment(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = callback.data.split("_")[1]
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    try:
        with open(os.path.join("data", "edit_codes.json"), "r", encoding="utf-8") as file:
            categories_data = json.load(file)
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
        if category_id in categories_data.get("categories", {}):
            category = categories_data["categories"][category_id]
        else:
            await callback.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.update_data(current_category=category)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
    data = await state.get_data()
    selected_equipment = data.get("selected_equipment", {})
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    selected_components = selected_equipment.get(category, [])
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    await state.set_state(OrderStates.selecting_components)
    
    await callback.answer()
    await callback.message.edit_text(
        f"üîß <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_equipment_components_keyboard(category, selected_components),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "add_equipment")
async def add_equipment(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    await state.set_state(OrderStates.selecting_equipment)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
    data = await state.get_data()
    district_name = data.get("district_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω")
    depth = data.get("depth", 0)
    drilling_cost = data.get("drilling_cost", 0)
    
    await callback.answer()
    await callback.message.edit_text(
        f"üèôÔ∏è <b>–†–∞–π–æ–Ω:</b> {district_name}\n"
        f"üìè <b>–ì–ª—É–±–∏–Ω–∞:</b> {depth} –º\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è:</b> {drilling_cost} ‚ÇΩ\n\n"
        f"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>",
        reply_markup=get_equipment_categories_keyboard()
    )

@router.callback_query(F.data.startswith("select_adapter_"))
async def process_adapter_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞
    """
    adapter_id = callback.data.replace("select_adapter_", "")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
    with open(os.path.join("data", "equipment.json"), "r", encoding="utf-8") as file:
        data = json.load(file)
    
    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞
    adapter = next((a for a in data.get("equipment", {}).get("adapters", []) if a["id"] == adapter_id), None)
    
    if not adapter:
        await callback.answer("‚ùå –ê–¥–∞–ø—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–¥–∞–ø—Ç–µ—Ä–µ
    await state.update_data(
        selected_adapter=adapter,
        equipment_cost=adapter["price"]
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–µ—Å—Å–æ–Ω–∞
    await state.set_state(OrderStates.selecting_caisson)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –∫–µ—Å—Å–æ–Ω–∞
    await callback.message.edit_text(
        "üõ¢Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–µ—Å—Å–æ–Ω:\n\n"
        "–ö–µ—Å—Å–æ–Ω - —ç—Ç–æ –≥–µ—Ä–º–µ—Ç–∏—á–Ω–∞—è –∫–∞–º–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å–∫–≤–∞–∂–∏–Ω—ã.",
        reply_markup=get_caissons_keyboard()
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("select_caisson_"))
async def process_caisson_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–µ—Å—Å–æ–Ω–∞
    """
    caisson_id = callback.data.replace("select_caisson_", "")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
    with open(os.path.join("data", "equipment.json"), "r", encoding="utf-8") as file:
        data = json.load(file)
    
    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–µ—Å—Å–æ–Ω–∞
    caisson = next((c for c in data.get("equipment", {}).get("caissons", []) if c["id"] == caisson_id), None)
    
    if not caisson:
        await callback.answer("‚ùå –ö–µ—Å—Å–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–¥–∞–ø—Ç–µ—Ä–µ
    data = await state.get_data()
    adapter = data.get("selected_adapter")
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    total_equipment_cost = adapter["price"] + caisson["price"]
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–µ—Å—Å–æ–Ω–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    await state.update_data(
        selected_caisson=caisson,
        equipment_cost=total_equipment_cost,
        adapter_info=adapter,
        caisson_info=caisson,
        equipment_details=[
            f"–ê–¥–∞–ø—Ç–µ—Ä: {adapter['name']} - {adapter['price']} ‚ÇΩ",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {adapter['description']}",
            f"–ö–µ—Å—Å–æ–Ω: {caisson['name']} - {caisson['price']} ‚ÇΩ",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {caisson['description']}"
        ]
    )
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
    message_text = (
        "‚úÖ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:\n\n"
        f"üîß –ê–¥–∞–ø—Ç–µ—Ä: {adapter['name']}\n"
        f"üìù {adapter['description']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {adapter['price']} ‚ÇΩ\n\n"
        f"üõ¢Ô∏è –ö–µ—Å—Å–æ–Ω: {caisson['name']}\n"
        f"üìù {caisson['description']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {caisson['price']} ‚ÇΩ\n\n"
        f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {total_equipment_cost} ‚ÇΩ\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
    await state.set_state(OrderStates.confirming_order)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=get_confirm_keyboard(),
        parse_mode='HTML'
    )
    
    await callback.answer()

