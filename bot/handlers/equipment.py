from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import json
import os
import logging

from bot.states.order_states import OrderStates
from bot.keyboards.equipment_kb import (
    get_simplified_equipment_keyboard, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    get_confirm_order_keyboard,
    load_equipment_data
)
from bot.keyboards.common_kb import get_cancel_keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

async def send_equipment_selection(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏."""
    await message.answer(
        "üöú <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b>",
        reply_markup=get_equipment_type_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(OrderStates.selecting_equipment_type)

def calculate_total_cost(data: dict) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞."""
    equipment_cost = data.get('equipment_price', 0)
    equipment_type = data.get('equipment_type', 'urb')
    depth = data.get('depth', 0)
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏
    if equipment_type == 'mgbu':
        drilling_cost = 3500 * depth
    else:
        drilling_cost = 3200 * depth
        
    return drilling_cost + equipment_cost

async def show_equipment_options(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –æ–ø—Ü–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."""
    await message.answer(
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>",
        reply_markup=get_simplified_equipment_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(OrderStates.selecting_equipment)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è --- 

@router.callback_query(OrderStates.selecting_equipment_type, F.data.startswith("equipment_type_"))
async def select_equipment_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏."""
    equipment_type = callback.data.split("_")[-1]
    await state.update_data(equipment_type=equipment_type)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    await callback.message.edit_text(
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>",
        reply_markup=get_simplified_equipment_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(OrderStates.selecting_equipment)
    await callback.answer()

@router.callback_query(OrderStates.selecting_equipment, F.data.startswith("select_equipment_"))
async def select_equipment_option(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–¥–Ω–æ–π –∏–∑ –æ–ø—Ü–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."""
    option_key = callback.data.split("_")[-1]
    equipment_data = load_equipment_data()
    selected_option = None

    for option in equipment_data.get("options", []):
        if option['key'] == option_key:
            selected_option = option
            break

    if not selected_option:
        await callback.answer("–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é –∏ –µ–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    await state.update_data(
        selected_equipment_key=option_key,
        equipment_name=selected_option['name'],
        equipment_price=selected_option['price']
    )

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    data = await state.get_data()
    total_cost = calculate_total_cost(data)
    await state.update_data(total_cost=total_cost)

    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
    await show_order_summary(callback, state)
    await callback.answer()

async def show_order_summary(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    data = await state.get_data()
    
    district_name = data.get("district_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
    depth = data.get("depth", 0)
    ground_type = data.get("ground_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    price_per_meter = data.get("price_per_meter", 0)
    drilling_cost = data.get("drilling_cost", 0)
    equipment_name = data.get("equipment_name", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    equipment_price = data.get("equipment_price", 0)
    total_cost = data.get("total_cost", 0)

    summary = (
        f"‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:</b>\n\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {district_name}\n"
        f"üìè <b>–ì–ª—É–±–∏–Ω–∞:</b> {depth} –º (–ì—Ä—É–Ω—Ç: {ground_type})\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è:</b> {drilling_cost} ‚ÇΩ (–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä: {price_per_meter} ‚ÇΩ)\n\n"
        f"üîß <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>\n"
        f"  - {equipment_name} ({equipment_price} ‚ÇΩ)\n\n"
        f"üí≤ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> {equipment_price} ‚ÇΩ\n"
        f"<b>–ò–¢–û–ì–û: {total_cost} ‚ÇΩ</b>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    )

    await state.set_state(OrderStates.entering_name)
    try:
        await callback.message.edit_text(summary, parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await callback.message.answer(summary, parse_mode='HTML')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ" --- 

@router.callback_query(F.data == "select_equipment") # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
async def edit_equipment_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ –æ–ø—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    await state.set_state(OrderStates.selecting_equipment)
    try:
        await callback.message.edit_text(
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>",
            reply_markup=get_simplified_equipment_keyboard(),
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {e}")
        await callback.message.answer(
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>",
            reply_markup=get_simplified_equipment_keyboard(),
            parse_mode='HTML'
        )
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ (–∫ –≥–ª—É–±–∏–Ω–µ)" --- 

@router.callback_query(F.data == "back_to_depth")
async def back_to_depth_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–ª—É–±–∏–Ω—ã –∏–∑ –º–µ–Ω—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."""
    from bot.handlers.depth import send_depth_selection # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    await state.set_state(OrderStates.selecting_depth)
    # –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å message, –∞ –Ω–µ callback.message –¥–ª—è send_depth_selection
    await send_depth_selection(callback.message, state) 
    await callback.answer()

@router.callback_query(F.data == "back_to_depth_from_confirm")
async def back_to_depth_from_confirm_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–ª—É–±–∏–Ω—ã –∏–∑ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    from bot.handlers.depth import send_depth_selection # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    await state.set_state(OrderStates.selecting_depth)
    # –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å message, –∞ –Ω–µ callback.message –¥–ª—è send_depth_selection
    await send_depth_selection(callback.message, state) 
    await callback.answer()

@router.message(OrderStates.entering_name)
async def handle_entering_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    full_name = message.text.strip()
    if not full_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û.")
        return
    await state.update_data(full_name=full_name)
    await state.set_state(OrderStates.entering_phone)
    await message.answer("üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(OrderStates.entering_phone)
async def handle_entering_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑."""
    phone = message.text.strip()
    if not phone or len(phone) < 7:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    await state.update_data(phone=phone)
    data = await state.get_data()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
    summary = (
        f"‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"üë§ <b>–§–ò–û:</b> {data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {data.get('district_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìè <b>–ì–ª—É–±–∏–Ω–∞:</b> {data.get('depth', 0)} –º (–ì—Ä—É–Ω—Ç: {data.get('ground_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')})\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è:</b> {data.get('drilling_cost', 0)} ‚ÇΩ (–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä: {data.get('price_per_meter', 0)} ‚ÇΩ)\n\n"
        f"üîß <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {data.get('equipment_name', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')} ({data.get('equipment_price', 0)} ‚ÇΩ)\n"
        f"üí≤ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> {data.get('equipment_price', 0)} ‚ÇΩ\n"
        f"<b>–ò–¢–û–ì–û: {data.get('total_cost', 0)} ‚ÇΩ</b>\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    await state.clear()
    await message.answer(summary, parse_mode='HTML')
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ" --- 

@router.callback_query(F.data == "select_equipment") # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
async def edit_equipment_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ –æ–ø—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    await state.set_state(OrderStates.selecting_equipment)
    try:
        await callback.message.edit_text(
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>",
            reply_markup=get_simplified_equipment_keyboard(),
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {e}")
        await callback.message.answer(
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>",
            reply_markup=get_simplified_equipment_keyboard(),
            parse_mode='HTML'
        )
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ (–∫ –≥–ª—É–±–∏–Ω–µ)" --- 

@router.callback_query(F.data == "back_to_depth")
async def back_to_depth_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–ª—É–±–∏–Ω—ã –∏–∑ –º–µ–Ω—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."""
    from bot.handlers.depth import send_depth_selection # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    await state.set_state(OrderStates.selecting_depth)
    # –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å message, –∞ –Ω–µ callback.message –¥–ª—è send_depth_selection
    await send_depth_selection(callback.message, state) 
    await callback.answer()

@router.callback_query(F.data == "back_to_depth_from_confirm")
async def back_to_depth_from_confirm_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–ª—É–±–∏–Ω—ã –∏–∑ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    from bot.handlers.depth import send_depth_selection # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    await state.set_state(OrderStates.selecting_depth)
    # –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å message, –∞ –Ω–µ callback.message –¥–ª—è send_depth_selection
    await send_depth_selection(callback.message, state) 
    await callback.answer()

# –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã

