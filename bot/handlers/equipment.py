from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import json
import os
import logging

from bot.states.order_states import OrderStates
from bot.keyboards.equipment_kb import (
    get_main_equipment_keyboard,
    get_adapter_options_keyboard,
    get_caisson_options_keyboard,
    get_confirm_order_keyboard,
    load_equipment_data # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
)
from bot.keyboards.common_kb import get_cancel_keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

def calculate_total_cost(data: dict) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞."""
    drilling_cost = data.get('drilling_cost', 0)
    equipment_cost = data.get('equipment_cost', 0)
    return drilling_cost + equipment_cost

async def update_equipment_message(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."""
    data = await state.get_data()
    selected_adapter_id = data.get("selected_adapter_id")
    selected_caisson_id = data.get("selected_caisson_id")
    
    message_text = "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>\n"
    
    equipment_cost = 0
    equipment_data = load_equipment_data()
    adapter_info = None
    caisson_info = None

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–¥–∞–ø—Ç–µ—Ä–µ
    if selected_adapter_id:
        for adapter in equipment_data.get("adapters", []):
            if adapter['id'] == selected_adapter_id:
                adapter_info = adapter
                equipment_cost += adapter['price']
                break
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–µ—Å—Å–æ–Ω–µ
    if selected_caisson_id:
        for caisson in equipment_data.get("caissons", []):
            if caisson['id'] == selected_caisson_id:
                caisson_info = caisson
                equipment_cost += caisson['price']
                break

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    await state.update_data(equipment_cost=equipment_cost,
                            adapter_info=adapter_info, 
                            caisson_info=caisson_info)

    total_cost = calculate_total_cost(data) # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    await state.update_data(total_cost=total_cost)
    
    message_text += f"\nüí∞ <b>–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> {equipment_cost} ‚ÇΩ"
    message_text += f"\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:</b> {total_cost} ‚ÇΩ"
    
    try:
        await callback.message.edit_text(
            message_text,
            reply_markup=get_main_equipment_keyboard(selected_adapter_id, selected_caisson_id),
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        try:
            await callback.message.answer(
                message_text,
                reply_markup=get_main_equipment_keyboard(selected_adapter_id, selected_caisson_id),
                parse_mode='HTML'
            )
        except Exception as inner_e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {inner_e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã --- 

@router.callback_query(F.data == "select_adapter_category")
async def select_adapter_category(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–¥–∞–ø—Ç–µ—Ä–æ–≤."""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–∞–ø—Ç–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_adapter_options_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "select_caisson_category")
async def select_caisson_category(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–µ—Å—Å–æ–Ω–æ–≤."""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ—Å—Å–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_caisson_options_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "finish_equipment_selection")
async def finish_equipment_selection(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–∫–∞–∑."""
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    district_name = data.get("district_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
    depth = data.get("depth", 0)
    ground_type = data.get("ground_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    price_per_meter = data.get("price_per_meter", 0)
    drilling_cost = data.get("drilling_cost", 0)
    equipment_cost = data.get("equipment_cost", 0)
    total_cost = data.get("total_cost", 0)
    adapter_info = data.get("adapter_info")
    caisson_info = data.get("caisson_info")

    summary = (
        f"‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:</b>\n\n"
        f"üìç <b>–†–∞–π–æ–Ω:</b> {district_name}\n"
        f"üìè <b>–ì–ª—É–±–∏–Ω–∞:</b> {depth} –º (–ì—Ä—É–Ω—Ç: {ground_type})\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ä–µ–Ω–∏—è:</b> {drilling_cost} ‚ÇΩ (–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä: {price_per_meter} ‚ÇΩ)\n\n"
        f"üîß <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>\n"
    )
    if adapter_info:
        summary += f"  - –ê–¥–∞–ø—Ç–µ—Ä: {adapter_info['name']} ({adapter_info['price']} ‚ÇΩ)\n"
    else:
        summary += "  - –ê–¥–∞–ø—Ç–µ—Ä: –ù–µ –≤—ã–±—Ä–∞–Ω\n"
    if caisson_info:
        summary += f"  - –ö–µ—Å—Å–æ–Ω: {caisson_info['name']} ({caisson_info['price']} ‚ÇΩ)\n"
    else:
        summary += "  - –ö–µ—Å—Å–æ–Ω: –ù–µ –≤—ã–±—Ä–∞–Ω\n"
    
    summary += f"\nüí≤ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> {equipment_cost} ‚ÇΩ\n"
    summary += f"<b>–ò–¢–û–ì–û: {total_cost} ‚ÇΩ</b>\n\n"
    summary += "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û."

    await state.set_state(OrderStates.entering_name)
    await callback.message.edit_text(summary, reply_markup=get_confirm_order_keyboard(), parse_mode='HTML')
    await callback.answer()

@router.callback_query(F.data == "back_to_depth")
async def back_to_depth_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–ª—É–±–∏–Ω—ã."""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from bot.handlers.depth import send_depth_selection
    await state.set_state(OrderStates.selecting_depth)
    await send_depth_selection(callback.message, state) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ depth.py
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–ø—Ü–∏–π --- 

@router.callback_query(F.data.startswith("set_adapter_"))
async def set_adapter_handler(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä."""
    adapter_id = callback.data.split("_")[-1]
    if adapter_id == 'none':
        await state.update_data(selected_adapter_id=None)
    else:
        try:
            await state.update_data(selected_adapter_id=int(adapter_id))
        except ValueError:
             logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π ID –∞–¥–∞–ø—Ç–µ—Ä–∞: {adapter_id}")
             await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞.", show_alert=True)
             return

    await update_equipment_message(callback, state)
    await callback.answer()

@router.callback_query(F.data.startswith("set_caisson_"))
async def set_caisson_handler(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–µ—Å—Å–æ–Ω –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä."""
    caisson_id = callback.data.split("_")[-1]
    if caisson_id == 'none':
        await state.update_data(selected_caisson_id=None)
    else:
        try:
            await state.update_data(selected_caisson_id=int(caisson_id))
        except ValueError:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–µ—Å—Å–æ–Ω–∞: {caisson_id}")
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–µ—Å—Å–æ–Ω–∞.", show_alert=True)
            return
            
    await update_equipment_message(callback, state)
    await callback.answer()

@router.callback_query(F.data == "back_to_main_equipment")
async def back_to_main_equipment_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."""
    await update_equipment_message(callback, state)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ --- 

@router.callback_query(F.data == "edit_equipment")
async def edit_equipment_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    await state.set_state(OrderStates.selecting_equipment)
    await update_equipment_message(callback, state)
    await callback.answer()

@router.callback_query(F.data == "back_to_depth_from_confirm")
async def back_to_depth_from_confirm(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–ª—É–±–∏–Ω—ã —Å —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from bot.handlers.depth import send_depth_selection
    await state.set_state(OrderStates.selecting_depth)
    await send_depth_selection(callback.message, state) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ depth.py
    await callback.answer()

@router.callback_query(F.data == "cancel_order")
async def cancel_order_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Å —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    await state.clear()
    await callback.message.edit_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=None)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É /start
    from bot.keyboards.common_kb import get_start_keyboard
    await callback.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç.", reply_markup=get_start_keyboard())
    await callback.answer()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è --- 
async def send_equipment_selection(message: Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ö—ç–Ω–¥–ª–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, depth.py).
    """
    await state.set_state(OrderStates.selecting_equipment)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
    await state.update_data(selected_adapter_id=None, selected_caisson_id=None, equipment_cost=0)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π CallbackQuery –¥–ª—è –≤—ã–∑–æ–≤–∞ update_equipment_message
    # –≠—Ç–æ –Ω–µ–º–Ω–æ–≥–æ —Ö–∞–∫, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    class FakeCallbackQuery:
        def __init__(self, msg):
            self.message = msg
        async def answer(self, *args, **kwargs): # –ü—É—Å—Ç—ã—à–∫–∞
            pass
            
    await update_equipment_message(FakeCallbackQuery(message), state)

