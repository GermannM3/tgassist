from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json
import os

# --- –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è --- 
def load_equipment_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –∏–∑ JSON."""
    try:
        with open(os.path.join("data", "equipment.json"), "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: –§–∞–π–ª data/equipment.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {}
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ data/equipment.json.")
        return {}

# --- –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è --- 
def get_main_equipment_keyboard(selected_adapter_id=None, selected_caisson_id=None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–∞–¥–∞–ø—Ç–µ—Ä, –∫–µ—Å—Å–æ–Ω)."""
    builder = InlineKeyboardBuilder()
    equipment_data = load_equipment_data()
    
    adapter_name = "–ù–µ –≤—ã–±—Ä–∞–Ω" 
    caisson_name = "–ù–µ –≤—ã–±—Ä–∞–Ω"

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞
    if selected_adapter_id:
        for adapter in equipment_data.get("adapters", []):
            if adapter['id'] == selected_adapter_id:
                adapter_name = f"{adapter['name']} ({adapter['price']} ‚ÇΩ)"
                break

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–µ—Å—Å–æ–Ω–∞
    if selected_caisson_id:
        for caisson in equipment_data.get("caissons", []):
            if caisson['id'] == selected_caisson_id:
                caisson_name = f"{caisson['name']} ({caisson['price']} ‚ÇΩ)"
                break

    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞
    adapter_text = f"üî© –ê–¥–∞–ø—Ç–µ—Ä: {adapter_name}"
    builder.button(text=adapter_text, callback_data="select_adapter_category")

    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–µ—Å—Å–æ–Ω–∞
    caisson_text = f"üï≥Ô∏è –ö–µ—Å—Å–æ–Ω: {caisson_name}"
    builder.button(text=caisson_text, callback_data="select_caisson_category")

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish_equipment_selection")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ (–∫ –≥–ª—É–±–∏–Ω–µ)", callback_data="back_to_depth")

    builder.adjust(1) # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ê–¥–∞–ø—Ç–µ—Ä–∞ --- 
def get_adapter_options_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤."""
    builder = InlineKeyboardBuilder()
    equipment_data = load_equipment_data()
    adapters = equipment_data.get("adapters", [])

    if not adapters:
        builder.button(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤", callback_data="no_options")
    else:
        for adapter in adapters:
            button_text = f"{adapter['name']} - {adapter['price']} ‚ÇΩ"
            builder.button(text=button_text, callback_data=f"set_adapter_{adapter['id']}")
    
    builder.button(text="‚ùå –ù–µ –≤—ã–±–∏—Ä–∞—Ç—å –∞–¥–∞–ø—Ç–µ—Ä", callback_data="set_adapter_none") # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_equipment")
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ö–µ—Å—Å–æ–Ω–∞ --- 
def get_caisson_options_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ—Å—Å–æ–Ω–æ–≤."""
    builder = InlineKeyboardBuilder()
    equipment_data = load_equipment_data()
    caissons = equipment_data.get("caissons", [])

    if not caissons:
        builder.button(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ—Å—Å–æ–Ω–æ–≤", callback_data="no_options")
    else:
        for caisson in caissons:
            button_text = f"{caisson['name']} - {caisson['price']} ‚ÇΩ"
            builder.button(text=button_text, callback_data=f"set_caisson_{caisson['id']}")
    
    builder.button(text="‚ùå –ù–µ –≤—ã–±–∏—Ä–∞—Ç—å –∫–µ—Å—Å–æ–Ω", callback_data="set_caisson_none") # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_equipment")
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ --- 
def get_confirm_order_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order_final")
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data="edit_equipment") # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ (–∫ –≥–ª—É–±–∏–Ω–µ)", callback_data="back_to_depth_from_confirm") # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–∞–¥–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–∏–ª—å–Ω–æ –Ω–∞–∑–∞–¥
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞", callback_data="cancel_order")
    builder.adjust(1)
    return builder.as_markup()

